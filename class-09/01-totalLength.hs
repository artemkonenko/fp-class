import System.Environment
import Control.Monad

{-
  Написать функцию, которая по заданному списку строк возвращает сумму длин всех строк.
-}

totalLength :: [String] -> Int
totalLength = foldl (\a b -> a + length b ) 0 

{-
  Написать функцию, которая по заданному символу и целому числу n строит список строк,
  содержащих 1, 2, ..., n повторений символа. Функция должна возвращать Nothing, если n=0.
-}

build1 :: Char -> Int -> Maybe [String]
build1 _ 0 = Nothing
build1 c n = Just $ foldl (\a b -> a ++ [replicate b c]) [] [1..n]

{-
  Написать функцию, аналогичную по возможностям функции build1, но возвращающую при этом
  значение Either String [String], в котором значение слева должно свидетельствовать об
  одной из следующих особых ситуаций: 
  (*) n=0;
  (*) n > 100;
  (*) Роспотребнадзор запрещает создавать строки из символа 'x'.
-}

build2 :: Char -> Int -> Either String [String]
build2 _ 0 = Left "n = 0"
build2 'x' _ = Left "Роспотребнадзор запрещает создавать строки из символа 'x'" 
build2 c n = Right $ foldl (\a b -> a ++ [replicate b c]) [] [1..n]

{-
  Параметрами командной строки являются имя файла, символ, целое число.
-}
main = do
{-
  1) Пользуясь функцией totalLength и возможностями IO, как функтора, подсчитать и
     вывести общую длину строк, переданных программе в качестве аргументов командной строки.
-}
  liftM totalLength getArgs >>= print

  args <- getArgs
{-
  2) Пользуясь функцией totalLength и возможностями IO, как функтора, подсчитать и вывести общую
     длину строк, содержащихся в заданном текстовом файле (результат readFile должен быть
     предварительно преобразован к списку строк).
-}
  totalLength `liftM` ((readFile . head) args >>= return . lines) >>= print
{-
  3) Пользуясь функцией totalLength, подсчитать общую длину строк для значений в контекстах,
     сформированных функциями build1 и build2 (в решении следует пользоваться возможностями
     Maybe и Either String как функторов).
-}
  totalLength `liftM` build1 (args !! 1) (args !! 2) >>= print

  totalLength `liftM` build2 (args !! 1) (args !! 2) >>= print
